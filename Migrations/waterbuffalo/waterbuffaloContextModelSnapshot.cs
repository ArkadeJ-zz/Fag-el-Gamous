// <auto-generated />
using System;
using Fag_el_Gamous.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Fag_el_Gamous.Migrations.waterbuffalo
{
    [DbContext(typeof(waterbuffaloContext))]
    partial class waterbuffaloContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Fag_el_Gamous.Models.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Fag_el_Gamous.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Fag_el_Gamous.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Fag_el_Gamous.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Fag_el_Gamous.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Fag_el_Gamous.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Fag_el_Gamous.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Fag_el_Gamous.Models.Carbon2", b =>
                {
                    b.Property<int>("CarbonId")
                        .HasColumnName("carbon_id")
                        .HasColumnType("integer");

                    b.Property<string>("Area")
                        .HasColumnName("area")
                        .HasColumnType("character varying");

                    b.Property<int?>("BurialId")
                        .HasColumnName("burial_id")
                        .HasColumnType("integer");

                    b.Property<string>("BurialNum")
                        .HasColumnName("burial_num")
                        .HasColumnType("character varying");

                    b.Property<string>("BurialSubplot")
                        .HasColumnName("burial_subplot")
                        .HasColumnType("character varying");

                    b.Property<string>("C14Sample2017")
                        .HasColumnName("c14_sample_2017")
                        .HasColumnType("character varying");

                    b.Property<string>("CCalendarDate")
                        .HasColumnName("c_calendar_date")
                        .HasColumnType("character varying");

                    b.Property<string>("Calibrated95PercentCalendarDateAvg")
                        .HasColumnName("calibrated_95_percent_calendar_date_avg")
                        .HasColumnType("character varying");

                    b.Property<string>("Calibrated95PercentCalendarDateMax")
                        .HasColumnName("calibrated_95_percent_calendar_date_max")
                        .HasColumnType("character varying");

                    b.Property<string>("Calibrated95PercentCalendarDateMin")
                        .HasColumnName("calibrated_95_percent_calendar_date_min")
                        .HasColumnType("character varying");

                    b.Property<string>("Calibrated95PercentCalendarDateSpan")
                        .HasColumnName("calibrated_95_percent_calendar_date_span")
                        .HasColumnType("character varying");

                    b.Property<string>("Category")
                        .HasColumnName("category")
                        .HasColumnType("character varying");

                    b.Property<string>("Conventional14cAgeBp")
                        .HasColumnName("conventional_14c_age_bp")
                        .HasColumnType("character varying");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying");

                    b.Property<string>("Ew")
                        .HasColumnName("ew")
                        .HasColumnType("character varying");

                    b.Property<string>("Foci")
                        .HasColumnName("foci")
                        .HasColumnType("character varying");

                    b.Property<string>("LocConcat")
                        .HasColumnName("loc_concat")
                        .HasColumnType("character varying");

                    b.Property<string>("Location")
                        .HasColumnName("location")
                        .HasColumnType("character varying");

                    b.Property<string>("LocationEw")
                        .HasColumnName("location_ew")
                        .HasColumnType("character varying");

                    b.Property<string>("LocationNs")
                        .HasColumnName("location_ns")
                        .HasColumnType("character varying");

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasColumnType("character varying");

                    b.Property<string>("Ns")
                        .HasColumnName("ns")
                        .HasColumnType("character varying");

                    b.Property<string>("Num")
                        .HasColumnName("num")
                        .HasColumnType("character varying");

                    b.Property<string>("Questions")
                        .HasColumnName("questions")
                        .HasColumnType("character varying");

                    b.Property<string>("RackAlt")
                        .HasColumnName("rack_alt")
                        .HasColumnType("character varying");

                    b.Property<string>("RackNum")
                        .HasColumnName("rack_num")
                        .HasColumnType("character varying");

                    b.Property<string>("SizeMl")
                        .HasColumnName("size_ml")
                        .HasColumnType("character varying");

                    b.Property<string>("TubeNum")
                        .HasColumnName("tube_num")
                        .HasColumnType("character varying");

                    b.HasKey("CarbonId")
                        .HasName("carbon2_pkey");

                    b.HasIndex("BurialId");

                    b.ToTable("carbon2");
                });

            modelBuilder.Entity("Fag_el_Gamous.Models.MasterBurial2", b =>
                {
                    b.Property<int>("BurialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("burial_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AgeCodeSingle")
                        .HasColumnName("age_code_single")
                        .HasColumnType("character varying");

                    b.Property<string>("AgeSkull")
                        .HasColumnName("age_skull")
                        .HasColumnType("character varying");

                    b.Property<string>("Ageatdeath")
                        .HasColumnName("ageatdeath")
                        .HasColumnType("character varying");

                    b.Property<string>("Agemethod")
                        .HasColumnName("agemethod")
                        .HasColumnType("character varying");

                    b.Property<int?>("AreaHillBurials")
                        .HasColumnName("area_hill_burials")
                        .HasColumnType("integer");

                    b.Property<bool?>("ArtifactFoundTf")
                        .HasColumnName("artifact_found_tf")
                        .HasColumnType("boolean");

                    b.Property<string>("ArtifactsDescription")
                        .HasColumnName("artifacts_description")
                        .HasColumnType("character varying");

                    b.Property<string>("BasilarSuture")
                        .HasColumnName("basilar_suture")
                        .HasColumnType("character varying");

                    b.Property<string>("BasionBregmaHeight")
                        .HasColumnName("basion_bregma_height")
                        .HasColumnType("character varying");

                    b.Property<string>("BasionNasion")
                        .HasColumnName("basion_nasion")
                        .HasColumnType("character varying");

                    b.Property<string>("BasionProsthionLength")
                        .HasColumnName("basion_prosthion_length")
                        .HasColumnType("character varying");

                    b.Property<string>("BizygomaticDiameter")
                        .HasColumnName("bizygomatic_diameter")
                        .HasColumnType("character varying");

                    b.Property<int?>("BodyAnalysis")
                        .HasColumnName("body_analysis")
                        .HasColumnType("integer");

                    b.Property<string>("BoneLength")
                        .HasColumnName("bone_length")
                        .HasColumnType("character varying");

                    b.Property<bool?>("BoneTakenTf")
                        .HasColumnName("bone_taken_tf")
                        .HasColumnType("boolean");

                    b.Property<string>("BurialAdultChild")
                        .HasColumnName("burial_adult_child")
                        .HasColumnType("character varying");

                    b.Property<string>("BurialDepth")
                        .HasColumnName("burial_depth")
                        .HasColumnType("character varying");

                    b.Property<string>("BurialDirection")
                        .HasColumnName("burial_direction")
                        .HasColumnType("character varying");

                    b.Property<string>("BurialLocationEw")
                        .HasColumnName("burial_location_ew")
                        .HasColumnType("character varying");

                    b.Property<string>("BurialLocationNs")
                        .HasColumnName("burial_location_ns")
                        .HasColumnType("character varying");

                    b.Property<int?>("BurialNumber")
                        .HasColumnName("burial_number")
                        .HasColumnType("integer");

                    b.Property<string>("BurialPreservation")
                        .HasColumnName("burial_preservation")
                        .HasColumnType("character varying");

                    b.Property<string>("BurialSituation")
                        .HasColumnName("burial_situation")
                        .HasColumnType("character varying");

                    b.Property<string>("BurialSubNumber")
                        .HasColumnName("burial_sub_number")
                        .HasColumnType("character varying");

                    b.Property<string>("BurialSubplot")
                        .HasColumnName("burial_subplot")
                        .HasColumnType("character varying");

                    b.Property<string>("BurialWrapping")
                        .HasColumnName("burial_wrapping")
                        .HasColumnType("character varying");

                    b.Property<string>("Burialageatdeath")
                        .HasColumnName("burialageatdeath")
                        .HasColumnType("character varying");

                    b.Property<string>("Burialagemethod")
                        .HasColumnName("burialagemethod")
                        .HasColumnType("character varying");

                    b.Property<string>("Burialgendermethod")
                        .HasColumnName("burialgendermethod")
                        .HasColumnType("character varying");

                    b.Property<string>("Burialhaircolor")
                        .HasColumnName("burialhaircolor")
                        .HasColumnType("character varying");

                    b.Property<string>("Burialicon")
                        .HasColumnName("burialicon")
                        .HasColumnType("character varying");

                    b.Property<string>("Burialicon2")
                        .HasColumnName("burialicon2")
                        .HasColumnType("character varying");

                    b.Property<bool?>("Burialsampletaken")
                        .HasColumnName("burialsampletaken")
                        .HasColumnType("boolean");

                    b.Property<string>("ButtonOsteoma")
                        .HasColumnName("button_osteoma")
                        .HasColumnType("character varying");

                    b.Property<string>("ByuSample")
                        .HasColumnName("byu_sample")
                        .HasColumnType("character varying");

                    b.Property<string>("Clstr")
                        .HasColumnName("clstr")
                        .HasColumnType("character varying");

                    b.Property<string>("CranialSuture")
                        .HasColumnName("cranial_suture")
                        .HasColumnType("character varying");

                    b.Property<string>("CribraOrbitala")
                        .HasColumnName("cribra_orbitala")
                        .HasColumnType("character varying");

                    b.Property<int?>("DateExcavated")
                        .HasColumnName("date_excavated")
                        .HasColumnType("integer");

                    b.Property<int?>("DateOnSkull")
                        .HasColumnName("date_on_skull")
                        .HasColumnType("integer");

                    b.Property<int?>("DayFound")
                        .HasColumnName("day_found")
                        .HasColumnType("integer");

                    b.Property<string>("DescriptionOfTaken")
                        .HasColumnName("description_of_taken")
                        .HasColumnType("character varying");

                    b.Property<int?>("DorsalPitting")
                        .HasColumnName("dorsal_pitting")
                        .HasColumnType("integer");

                    b.Property<string>("EpiphysealUnion")
                        .HasColumnName("epiphyseal_union")
                        .HasColumnType("character varying");

                    b.Property<string>("EstimateAge")
                        .HasColumnName("estimate_age")
                        .HasColumnType("character varying");

                    b.Property<string>("EstimateLivingStature")
                        .HasColumnName("estimate_living_stature")
                        .HasColumnType("character varying");

                    b.Property<string>("FaceBundle")
                        .HasColumnName("face_bundle")
                        .HasColumnType("character varying");

                    b.Property<string>("FemurDiameter")
                        .HasColumnName("femur_diameter")
                        .HasColumnType("character varying");

                    b.Property<string>("FemurHead")
                        .HasColumnName("femur_head")
                        .HasColumnType("character varying");

                    b.Property<string>("FemurLength")
                        .HasColumnName("femur_length")
                        .HasColumnType("character varying");

                    b.Property<string>("FieldBook")
                        .HasColumnName("field_book")
                        .HasColumnType("character varying");

                    b.Property<string>("FieldBookPageNumber")
                        .HasColumnName("field_book_page_number")
                        .HasColumnType("character varying");

                    b.Property<string>("ForemanMagnum")
                        .HasColumnName("foreman_magnum")
                        .HasColumnType("character varying");

                    b.Property<string>("GeFunctionTotal")
                        .HasColumnName("ge_function_total")
                        .HasColumnType("character varying");

                    b.Property<string>("GenderBodyCol")
                        .HasColumnName("gender_body_col")
                        .HasColumnType("character varying");

                    b.Property<string>("GenderCode")
                        .HasColumnName("gender_code")
                        .HasColumnType("character varying");

                    b.Property<string>("GenderGe")
                        .HasColumnName("gender_ge")
                        .HasColumnType("character varying");

                    b.Property<int?>("Gonian")
                        .HasColumnName("gonian")
                        .HasColumnType("integer");

                    b.Property<string>("Goods")
                        .HasColumnName("goods")
                        .HasColumnType("character varying");

                    b.Property<string>("HairColor")
                        .HasColumnName("hair_color")
                        .HasColumnType("character varying");

                    b.Property<string>("HairColorCode")
                        .HasColumnName("hair_color_code")
                        .HasColumnType("character varying");

                    b.Property<bool?>("HairTakenTf")
                        .HasColumnName("hair_taken_tf")
                        .HasColumnType("boolean");

                    b.Property<string>("Haircolor1")
                        .HasColumnName("haircolor")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadDirection")
                        .HasColumnName("head_direction")
                        .HasColumnType("character varying");

                    b.Property<string>("HighPairEw")
                        .HasColumnName("high_pair_ew")
                        .HasColumnType("character varying");

                    b.Property<string>("HighPairNs")
                        .HasColumnName("high_pair_ns")
                        .HasColumnType("character varying");

                    b.Property<string>("Humerus")
                        .HasColumnName("humerus")
                        .HasColumnType("character varying");

                    b.Property<string>("HumerusHead")
                        .HasColumnName("humerus_head")
                        .HasColumnType("character varying");

                    b.Property<string>("HumerusLength")
                        .HasColumnName("humerus_length")
                        .HasColumnType("character varying");

                    b.Property<string>("IliacCrest")
                        .HasColumnName("iliac_crest")
                        .HasColumnType("character varying");

                    b.Property<string>("InitialsOfDataEntryChecker")
                        .HasColumnName("initials_of_data_entry_checker")
                        .HasColumnType("character varying");

                    b.Property<string>("InitialsOfDataEntryExpert")
                        .HasColumnName("initials_of_data_entry_expert")
                        .HasColumnType("character varying");

                    b.Property<string>("InterorbitalBreadth")
                        .HasColumnName("interorbital_breadth")
                        .HasColumnType("character varying");

                    b.Property<string>("LengthCm")
                        .HasColumnName("length_cm")
                        .HasColumnType("character varying");

                    b.Property<string>("LengthM")
                        .HasColumnName("length_m")
                        .HasColumnType("character varying");

                    b.Property<string>("LengthOfRemains")
                        .HasColumnName("length_of_remains")
                        .HasColumnType("character varying");

                    b.Property<string>("LinearHypoplasiaEnamel")
                        .HasColumnName("linear_hypoplasia_enamel")
                        .HasColumnType("character varying");

                    b.Property<string>("LocConcat")
                        .HasColumnName("loc_concat")
                        .HasColumnType("character varying");

                    b.Property<string>("LowPairEw")
                        .HasColumnName("low_pair_ew")
                        .HasColumnType("character varying");

                    b.Property<string>("LowPairNs")
                        .HasColumnName("low_pair_ns")
                        .HasColumnType("character varying");

                    b.Property<string>("MaximumCranialBreadth")
                        .HasColumnName("maximum_cranial_breadth")
                        .HasColumnType("character varying");

                    b.Property<string>("MaximumCranialLength")
                        .HasColumnName("maximum_cranial_length")
                        .HasColumnType("character varying");

                    b.Property<string>("MaximumNasalBreadth")
                        .HasColumnName("maximum_nasal_breadth")
                        .HasColumnType("character varying");

                    b.Property<string>("MedialClavicle")
                        .HasColumnName("medial_clavicle")
                        .HasColumnType("character varying");

                    b.Property<int?>("MedialIpRamus")
                        .HasColumnName("medial_ip_ramus")
                        .HasColumnType("integer");

                    b.Property<string>("MetopicSuture")
                        .HasColumnName("metopic_suture")
                        .HasColumnType("character varying");

                    b.Property<string>("MonthExcavated")
                        .HasColumnName("month_excavated")
                        .HasColumnType("character varying");

                    b.Property<string>("MonthFound")
                        .HasColumnName("month_found")
                        .HasColumnType("character varying");

                    b.Property<string>("MonthOnSkull")
                        .HasColumnName("month_on_skull")
                        .HasColumnType("character varying");

                    b.Property<string>("NasionProsthion")
                        .HasColumnName("nasion_prosthion")
                        .HasColumnType("character varying");

                    b.Property<int?>("NuchalCrest")
                        .HasColumnName("nuchal_crest")
                        .HasColumnType("integer");

                    b.Property<int?>("OrbitEdge")
                        .HasColumnName("orbit_edge")
                        .HasColumnType("integer");

                    b.Property<string>("OsteologyNotes")
                        .HasColumnName("osteology_notes")
                        .HasColumnType("character varying");

                    b.Property<string>("OsteologyUnknownComment")
                        .HasColumnName("osteology_unknown_comment")
                        .HasColumnType("character varying");

                    b.Property<string>("Osteophytosis")
                        .HasColumnName("osteophytosis")
                        .HasColumnType("character varying");

                    b.Property<int?>("ParietalBossing")
                        .HasColumnName("parietal_bossing")
                        .HasColumnType("integer");

                    b.Property<string>("PathologyAnomalies")
                        .HasColumnName("pathology_anomalies")
                        .HasColumnType("character varying");

                    b.Property<string>("PoroticHyperostosis")
                        .HasColumnName("porotic_hyperostosis")
                        .HasColumnType("character varying");

                    b.Property<string>("PoroticHyperostosisLocations")
                        .HasColumnName("porotic_hyperostosis_locations")
                        .HasColumnType("character varying");

                    b.Property<string>("PostcraniaAtMagazine")
                        .HasColumnName("postcrania_at_magazine")
                        .HasColumnType("character varying");

                    b.Property<string>("PostcraniaTrauma")
                        .HasColumnName("postcrania_trauma")
                        .HasColumnType("character varying");

                    b.Property<int?>("PreaurSulcus")
                        .HasColumnName("preaur_sulcus")
                        .HasColumnType("integer");

                    b.Property<string>("Preservation")
                        .HasColumnName("preservation")
                        .HasColumnType("character varying");

                    b.Property<string>("PreservationIndex")
                        .HasColumnName("preservation_index")
                        .HasColumnType("character varying");

                    b.Property<int?>("PubicBone")
                        .HasColumnName("pubic_bone")
                        .HasColumnType("integer");

                    b.Property<string>("PubicSymphysis")
                        .HasColumnName("pubic_symphysis")
                        .HasColumnType("character varying");

                    b.Property<string>("RackAndShelf")
                        .HasColumnName("rack_and_shelf")
                        .HasColumnType("character varying");

                    b.Property<int?>("Robust")
                        .HasColumnName("robust")
                        .HasColumnType("integer");

                    b.Property<string>("Sample")
                        .HasColumnName("sample")
                        .HasColumnType("character varying");

                    b.Property<int?>("SampleNumber")
                        .HasColumnName("sample_number")
                        .HasColumnType("integer");

                    b.Property<int?>("SciaticNotch")
                        .HasColumnName("sciatic_notch")
                        .HasColumnType("integer");

                    b.Property<string>("Sex")
                        .HasColumnName("sex")
                        .HasColumnType("character varying");

                    b.Property<string>("SexSkull")
                        .HasColumnName("sex_skull")
                        .HasColumnType("character varying");

                    b.Property<string>("Sexmethod")
                        .HasColumnName("sexmethod")
                        .HasColumnType("character varying");

                    b.Property<string>("SkullAtMagazine")
                        .HasColumnName("skull_at_magazine")
                        .HasColumnType("character varying");

                    b.Property<string>("SkullTrauma")
                        .HasColumnName("skull_trauma")
                        .HasColumnType("character varying");

                    b.Property<bool?>("SoftTissueTakenTf")
                        .HasColumnName("soft_tissue_taken_tf")
                        .HasColumnType("boolean");

                    b.Property<string>("SouthToFeet")
                        .HasColumnName("south_to_feet")
                        .HasColumnType("character varying");

                    b.Property<string>("SouthToHead")
                        .HasColumnName("south_to_head")
                        .HasColumnType("character varying");

                    b.Property<int?>("SubpubicAngle")
                        .HasColumnName("subpubic_angle")
                        .HasColumnType("integer");

                    b.Property<int?>("SupraorbitalRidges")
                        .HasColumnName("supraorbital_ridges")
                        .HasColumnType("integer");

                    b.Property<string>("TemporalMandibularJointOsteoarthritisTmjOa")
                        .HasColumnName("temporal_mandibular_joint_osteoarthritis_tmj_oa")
                        .HasColumnType("character varying");

                    b.Property<bool?>("TextileTakenTf")
                        .HasColumnName("textile_taken_tf")
                        .HasColumnType("boolean");

                    b.Property<string>("TibiaLength")
                        .HasColumnName("tibia_length")
                        .HasColumnType("character varying");

                    b.Property<string>("ToBeConfirmed")
                        .HasColumnName("to_be_confirmed")
                        .HasColumnType("character varying");

                    b.Property<int?>("Tomb")
                        .HasColumnName("tomb")
                        .HasColumnType("integer");

                    b.Property<string>("ToothAttrition")
                        .HasColumnName("tooth_attrition")
                        .HasColumnType("character varying");

                    b.Property<string>("ToothEruption")
                        .HasColumnName("tooth_eruption")
                        .HasColumnType("character varying");

                    b.Property<bool?>("ToothTakenTf")
                        .HasColumnName("tooth_taken_tf")
                        .HasColumnType("boolean");

                    b.Property<int?>("VentralArc")
                        .HasColumnName("ventral_arc")
                        .HasColumnType("integer");

                    b.Property<string>("WestToFeet")
                        .HasColumnName("west_to_feet")
                        .HasColumnType("character varying");

                    b.Property<string>("WestToHead")
                        .HasColumnName("west_to_head")
                        .HasColumnType("character varying");

                    b.Property<string>("YearExcav")
                        .HasColumnName("year_excav")
                        .HasColumnType("character varying");

                    b.Property<int?>("YearFound")
                        .HasColumnName("year_found")
                        .HasColumnType("integer");

                    b.Property<string>("YearOnSkull")
                        .HasColumnName("year_on_skull")
                        .HasColumnType("character varying");

                    b.Property<int?>("ZygomaticCrest")
                        .HasColumnName("zygomatic_crest")
                        .HasColumnType("integer");

                    b.HasKey("BurialId")
                        .HasName("master_burial2_pkey");

                    b.ToTable("master_burial2");
                });

            modelBuilder.Entity("Fag_el_Gamous.Models.Samples2", b =>
                {
                    b.Property<int>("SampleId")
                        .HasColumnName("sample_id")
                        .HasColumnType("integer");

                    b.Property<string>("Area")
                        .HasColumnName("area")
                        .HasColumnType("character varying");

                    b.Property<int?>("BagNum")
                        .HasColumnName("bag_num")
                        .HasColumnType("integer");

                    b.Property<int?>("BurialId")
                        .HasColumnName("burial_id")
                        .HasColumnType("integer");

                    b.Property<long?>("BurialNum")
                        .HasColumnName("burial_num")
                        .HasColumnType("bigint");

                    b.Property<int?>("ClusterNum")
                        .HasColumnName("cluster_num")
                        .HasColumnType("integer");

                    b.Property<int?>("DateDay")
                        .HasColumnName("date_day")
                        .HasColumnType("integer");

                    b.Property<int?>("DateMonth")
                        .HasColumnName("date_month")
                        .HasColumnType("integer");

                    b.Property<int?>("DateYear")
                        .HasColumnName("date_year")
                        .HasColumnType("integer");

                    b.Property<string>("EW")
                        .HasColumnName("e_w")
                        .HasColumnType("character varying");

                    b.Property<int?>("HighEw")
                        .HasColumnName("high_ew")
                        .HasColumnType("integer");

                    b.Property<int?>("HighNs")
                        .HasColumnName("high_ns")
                        .HasColumnType("integer");

                    b.Property<string>("Initials")
                        .HasColumnName("initials")
                        .HasColumnType("character varying");

                    b.Property<string>("LocConcat")
                        .HasColumnName("loc_concat")
                        .HasColumnType("character varying");

                    b.Property<int?>("LowEw")
                        .HasColumnName("low_ew")
                        .HasColumnType("integer");

                    b.Property<int?>("LowNs")
                        .HasColumnName("low_ns")
                        .HasColumnType("integer");

                    b.Property<string>("NS")
                        .HasColumnName("n_s")
                        .HasColumnType("character varying");

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasColumnType("text");

                    b.Property<string>("PreviouslySampled")
                        .HasColumnName("previously_sampled")
                        .HasColumnType("character varying");

                    b.Property<int?>("RackNum")
                        .HasColumnName("rack_num")
                        .HasColumnType("integer");

                    b.Property<string>("SubBurialNum")
                        .HasColumnName("sub_burial_num")
                        .HasColumnType("character varying");

                    b.HasKey("SampleId")
                        .HasName("samples2_pkey");

                    b.HasIndex("BurialId");

                    b.ToTable("samples2");
                });

            modelBuilder.Entity("Fag_el_Gamous.Models.AspNetRoleClaims", b =>
                {
                    b.HasOne("Fag_el_Gamous.Models.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fag_el_Gamous.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("Fag_el_Gamous.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fag_el_Gamous.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("Fag_el_Gamous.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fag_el_Gamous.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("Fag_el_Gamous.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fag_el_Gamous.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fag_el_Gamous.Models.AspNetUserTokens", b =>
                {
                    b.HasOne("Fag_el_Gamous.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fag_el_Gamous.Models.Carbon2", b =>
                {
                    b.HasOne("Fag_el_Gamous.Models.MasterBurial2", "Burial")
                        .WithMany("Carbon2")
                        .HasForeignKey("BurialId")
                        .HasConstraintName("burial_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fag_el_Gamous.Models.Samples2", b =>
                {
                    b.HasOne("Fag_el_Gamous.Models.MasterBurial2", "Burial")
                        .WithMany("Samples2")
                        .HasForeignKey("BurialId")
                        .HasConstraintName("burial_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
